/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-05-28 15:49:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class form_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<title>폼 과제</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	<h3>폼을 입력해주세요.</h3>\n");
      out.write("	<form action=\"result.jsp\" name=\"member\" method=\"post\">\n");
      out.write("		<p>학번 : <input type=\"text\" name=\"stu_num\"></p>\n");
      out.write("		<p>이름 : <input type=\"text\" name=\"name\"></p>\n");
      out.write("		<p>전화번호 : <select name=\"phone\">\n");
      out.write("				<option value=\"010\">010</option>\n");
      out.write("				<option value=\"011\">011</option>\n");
      out.write("				<option value=\"016\">016</option>\n");
      out.write("				<option value=\"017\">017</option>\n");
      out.write("				<option value=\"019\">019</option>\n");
      out.write("				</select> - <input type=\"text\" maxlength=\"4\" size=\"4\" name=\"phone2\"> -\n");
      out.write("				<input type=\"text\" maxlength=\"4\" size=\"4\" name=\"phone3\">\n");
      out.write("		</p>\n");
      out.write("		<p>수강과목: \n");
      out.write("			    <input type=\"text\" id=\"subjectInput\" placeholder=\"과목명 입력\">\n");
      out.write("  				<input type=\"button\" value=\"추가\" onclick=\"addSubject()\">\n");
      out.write("  		</p>\n");
      out.write("  				<div id=\"subjectList\"></div>\n");
      out.write("		\n");
      out.write("		<p><textarea name=\"comment\" cols=\"30\" rows=\"3\"	placeholder=\"소감 입력\"></textarea></p>\n");
      out.write("		<p>정보 제공에 동의하십니까?</p>\n");
      out.write("		<p><label for=\"yes\">예</label><input id=\"yes\" type=\"radio\" name=\"agree\" value=\"예\" checked> \n");
      out.write("		<label for=\"no\">아니오</label><input id=\"no\" type=\"radio\" name=\"agree\" value=\"아니오\"> </p>\n");
      out.write("		<p><input type=\"submit\" value=\"가입하기\"> \n");
      out.write("			<input type=\"reset\"	value=\"다시쓰기\">\n");
      out.write("		</p>\n");
      out.write("	</form>\n");
      out.write("<script>\n");
      out.write("	const form = document.querySelector(\"form\");\n");
      out.write("\n");
      out.write("	form.addEventListener(\"reset\", function () {\n");
      out.write("  		document.getElementById(\"subjectList\").innerHTML = \"\";\n");
      out.write("	});\n");
      out.write("\n");
      out.write("\n");
      out.write("  function addSubject() {\n");
      out.write("    const input = document.getElementById(\"subjectInput\");\n");
      out.write("    const value = input.value.trim();\n");
      out.write("    if (value) {\n");
      out.write("      const subjectList = document.getElementById(\"subjectList\");\n");
      out.write("\n");
      out.write("      const div = document.createElement(\"div\")\n");
      out.write("      \n");
      out.write("      const checkbox = document.createElement(\"input\");\n");
      out.write("      checkbox.type = \"checkbox\";\n");
      out.write("      checkbox.name = \"subject\";\n");
      out.write("      checkbox.value = value;\n");
      out.write("      checkbox.checked = true; \n");
      out.write("      \n");
      out.write("      const label = document.createElement(\"label\");\n");
      out.write("      label.innerText = value;\n");
      out.write("\n");
      out.write("      div.appendChild(checkbox);\n");
      out.write("      div.appendChild(label);\n");
      out.write("      subjectList.appendChild(div);\n");
      out.write("\n");
      out.write("      input.value = \"\";\n");
      out.write("    }\n");
      out.write("  }\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("<html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
